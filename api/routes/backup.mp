// //UTILIZANDO C√ìDIGO DO 
// //Define uma rota http para '/cadastro' -  AQUI NOS MANDAMOS OS DADOS PARA O MONGODB
// router.post('/cadastrousuarios', async (req, res) => {
//   try {
//     //Cria um novo usu√°rio com base nos dados do corpo da requisi√ß√£o
//     let UserModel = mongoose.model('User', userSchema);

//     //Cria uma nova inst√¢ncia de usu√°rio com base nos dados reebidos na requisi√ß√£o
//     let usuario = new UserModel({

//       nomecompleto: req.body.nomeCompleto,
//       cpf: req.body.cpf,
//       datanascimento: req.body.dataNascimento,
//       telefone: req.body.telefone,
//       email: req.body.email,
//       senha: req.body.senha,

//     });

//     //Capturar os dados
//     await usuario.save();


//     //Colocar uma funcao para disparar email
//     var options = req.body;
//     var nodemailer = require('nodemailer');

//     var remetente = nodemailer.createTransport({
//       host: 'email-ssl.com.br',
//       service: 'email-ssl.com.br',
//       port: 587,
//       secure: false,
//       auth: {
//         user: 'noreply@cfn.org.br',
//         pass: '$8KE87q9znD!'
//       }
//     });
//     const body = `
//       Ol√° prezado(a) ${options.nomeCompleto}.<br><br>
//       Segue as credenciais de acesso ao Sistema Biblioteca:<br>
//       URL: http://localhost:3000/Cadastrousuarios<br>
//       Login: ${options.email}<br>
//       Senha: ${options.senha_clear}<br><br>

//       Atenciosamente,<br>
//       Assessoria de TI do CFN<br> 
//       Conselho Federal de Nutricionistas<br>
//     `;

//     var emailASerEnviado = {
//       from: 'noreply@cfn.org.br',
//       to: options.email,
//       subject: 'Credenciais de Acesso - BIBLIOTECA ',
//       html: body,
//     };
//     remetente.sendMail(emailASerEnviado, function (error) {
//       if (error) {

//         console.log(error);
//         res.send(false);
//       } else {

//         console.log('Email enviado com sucesso.');
//         res.send(true);
//       }
//     });

//     console.log(usuario);

//     // Responde com o objeto de usu√°rio salvo
//     res.json("Salvei");
//   } catch (error) {
//     // Se houver um erro, responde com um status de erro e mensagem
//     res.status(500).json({ erro: error.message });
//   }
// });


// const nodemailer = require("nodemailer");

// const transportador = nodemailer.createTransport({
//    host: "smtp.ethereal.email",
//    porta: 587,
//    secure: false, // Use `true` para a porta 465, `false` para todas as outras portas
//    autentica√ß√£o: {
//      usu√°rio: "maddison53@ethereal.email",
//      passar: "jn7jnAPss4f63QBp6D",
//    },
// });

// // async..await n√£o √© permitido no escopo global, deve usar um wrapper
// fun√ß√£o ass√≠ncrona main() {
//    // envia e-mail com objeto de transporte definido
//    const info = aguardar transporter.sendMail({
//      de: '"Maddison Foo Koch üëª" <maddison53@ethereal.email>', // endere√ßo do remetente
//      para: "bar@example.com, baz@example.com", // lista de destinat√°rios
//      subject: "Ol√° ‚úî", // Linha de assunto
//      text: "Ol√°, mundo?", // corpo do texto simples
//      html: "<b>Ol√°, mundo?</b>", // corpo html
//    });

//    console.log("Mensagem enviada: %s", info.messageId);
//    // Mensagem enviada: <d786aa62-4e0a-070a-47ed-0b0666549519@ethereal.email>
// }

// main().catch(console.error);




// 1. Configurando as op√ß√µes de email:

// var options = req.body;: Essa linha pressup√µe que voc√™ esteja usando um framework Node.js como Express. Ela recupera dados do corpo da requisi√ß√£o (provavelmente de um envio de formul√°rio) e os armazena na vari√°vel options. Esses dados provavelmente incluem o nome completo do usu√°rio (nomeCompleto), endere√ßo de email (email) e senha n√£o criptografada (senha_clear).
// 2. Importando Nodemailer:

// const nodemailer = require("nodemailer");: Esta linha importa o m√≥dulo nodemailer, que permite enviar emails do seu aplicativo Node.js.
// 3. Criando o transportador de email:

// const transporter = nodemailer.createTransport({ ... });: Aqui, voc√™ est√° criando um objeto transportador que configura como o Nodemailer enviar√° emails. A configura√ß√£o inclui:
// host: "email-ssl.com.br": O hostname ou endere√ßo IP do servidor de email que voc√™ est√° usando.
// port: 587: O n√∫mero da porta usada para comunica√ß√£o com o servidor de email. Essa porta √© comumente usada para conex√µes n√£o criptografadas.
// secure: false: Especifica que voc√™ n√£o est√° usando uma conex√£o segura (como SSL/TLS). √â altamente recomend√°vel usar uma conex√£o segura para comunica√ß√£o de email.
// auth: { ... }: Este objeto armazena as credenciais de autentica√ß√£o com o servidor de email:
// user: "noreply@cfn.org.br": O nome de usu√°rio da sua conta de email.
// pass: "$8KE87q9znD!": A senha da sua conta de email. √â altamente recomend√°vel evitar armazenar senhas diretamente no c√≥digo. Considere usar vari√°veis de ambiente ou um sistema de gerenciamento de configura√ß√£o seguro.
// 4. Construindo o corpo do email:

// const body = ... ;: Esta se√ß√£o constr√≥i o conte√∫do HTML do email que ser√° enviado ao usu√°rio. Ele inclui espa√ßos reservados para o nome completo do usu√°rio (options.nomeCompleto), endere√ßo de email (options.email) e senha (options.senha_clear). Tenha cuidado ao enviar senhas n√£o criptografadas em emails.
// 5. Enviando o email (Fun√ß√£o ass√≠ncrona):

// async function main() { ... }: Esta √© uma fun√ß√£o ass√≠ncrona chamada main que lida com o processo de envio de email. Fun√ß√µes ass√≠ncronas permitem que voc√™ lide com opera√ß√µes que podem levar tempo (como enviar um email) sem bloquear o thread principal do seu aplicativo.
// transporter.sendMail({ ... });: Dentro da fun√ß√£o main, voc√™ chama o m√©todo sendMail do objeto transportador. Este m√©todo recebe um objeto contendo os detalhes do email como argumento:
// from: '"Maddison Foo Koch " <noreply@cfn.org.br>': Nome e endere√ßo de email do remetente.
// to: "fernandocfn2023@gmail.com": Endere√ßo de email do destinat√°rio.
// subject: options.email: A linha de assunto do email, que neste caso √© definida como o endere√ßo de email do usu√°rio.
// text: "Hello world?": Isso √© inclu√≠do para compatibilidade com clientes de email de texto simples, mas √© substitu√≠do pela propriedade html.
// html: body: O conte√∫do HTML do email que foi constru√≠do anteriormente.
// 6. Gerenciando a resposta e erros:

// console.log("Message sent: %s", "Mensagem Enviada", info.messageId);: Se o email for enviado com sucesso, esta linha registra uma mensagem no console indicando o sucesso junto com o ID da mensagem do servidor de email.
// main().catch(console.error);: Esta linha garante que quaisquer erros encontrados durante o processo de envio de email sejam capturados e registrados no console usando console.error.
// Considera√ß√µes importantes de seguran√ßa:

// Evite armazenar senhas no c√≥digo: √â crucial nunca armazenar senhas diretamente no seu c√≥digo. Considere usar vari√°veis de ambiente ou um sistema de gerenciamento de configura√ß√£o seguro para armazenar informa√ß√µes confidenciais.
// Use conex√µes seguras (TLS/SSL): Sempre configure o Nodemailer para usar uma conex√£o segura (TLS/SSL) ao enviar emails. Isso criptografa a comunica√ß√£o entre seu aplicativo e o servidor de email, protegendo dados confidenciais.
// Limpe a entrada do usu√°rio: Antes de usar options.email e options.senha_clear no corpo do email, certifique-se de higieniz√°-

1- Na api, ap√≥s gerar o token de login, o express deve guardar esse token em uma lista. 
Seja um object ou um array. ok
2 - antes de salvar o token nesse array, vc deve verificar se o token est√° duplicado 
3 - se o token for duplicado, gera outro e cai na a√ß√£o 2
4 - se o token n√£o for duplicado, insere o token na lista (a√ß√£o 1)
5 - se tudo estiver ok devolve o token para o reac
6 na rota /verificarToken, envia o token para o express e checa 
se o token existe na lista de tokens
7 - se o token existir, retorna true, se n√£o, false

// Importa as fun√ß√µes useState e useEffect do React
import React, { useState, useEffect } from 'react';
import Table from 'react-bootstrap/Table';
import { Modal, Button, Form } from 'react-bootstrap';
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useNavigate } from 'react-router-dom'; // Assumindo que voc√™ est√° usando react-router-dom para navega√ß√£o

// Define o componente funcional Tabelausuarios
const Tabelausuarios = () => {
  const navigate = useNavigate();
  const [tokenValido, setTokenValido] = useState(false);

  // Verifica a sess√£o ao carregar a p√°gina e valida o token
  useEffect(() => {
    const token = sessionStorage.getItem('token');
    if (token) {
      // Faz a requisi√ß√£o para verificar o token
      fetch('http://localhost:9000/verificarToken', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token }),
      })
        .then(response => response.json())
        .then(data => {
          if (data.validado) {
            setTokenValido(true);
          } else {
            setTokenValido(false);
            alert('Token inv√°lido. Redirecionando para a tela de login.');
            navigate('/Login'); // Redireciona para a tela de login se o token for inv√°lido
          }
        })
        .catch(error => {
          console.error('Erro:', error);
        });
    } else {
      alert('Token n√£o encontrado. Redirecionando para a tela de login.');
      navigate('/Login'); // Redireciona para a tela de login se o token n√£o for encontrado
    }
  }, [navigate]);